package datamodel;


import java.sql.*;
import java.util.ArrayList;
import java.util.List;
/**
 * Database is a class that specifies the interface to the 
 * movie database. Uses JDBC and the MySQL Connector/J driver.
 */
public class Database {
    /** 
     * The database connection.
     */
    private Connection conn;
   
        
    /**
     * Create the database interface object. Connection to the database
     * is performed later.
     */
    public Database() {
        conn = null;
        
    }
        
    /** 
     * Open a connection to the database, using the specified user name
     * and password.
     *
     * @param userName The user name.
     * @param password The user's password.
     * @return true if the connection succeeded, false if the supplied
     * user name and password were not recognized. Returns false also
     * if the JDBC driver isn't found.
     */
    public boolean openConnection(String userName, String password) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection 
                ("jdbc:mysql://puccini.cs.lth.se/" + userName,
                 userName, password);
        }
        catch (SQLException e) {
            System.err.println(e);
            e.printStackTrace();
            return false;
        }
        catch (ClassNotFoundException e) {
            System.err.println(e);
            e.printStackTrace();
            return false;
        }
        return true;
    }
        
    /**
     * Close the connection to the database.
     */
    public void closeConnection() {
        try {
            if (conn != null)
                conn.close();
        }
        catch (SQLException e) {
        	e.printStackTrace();
        }
        conn = null;
        
        System.err.println("Database connection closed.");
    }
        
    /**
     * Check if the connection to the database has been established
     *
     * @return true if the connection has been established
     */
    public boolean isConnected() {
        return conn != null;
    }
	
  	public String getCookieRecipe(String cookie) {
	
		StringBuilder sb = new StringBuilder();
		
		
		try {
			
			PreparedStatement ps = conn.prepareStatement("select * from Recipe where CookieName=?");
			ps.setString(1, cookie);			
			ResultSet rs = ps.executeQuery();				
			
			while(rs.next()){
				sb.append(rs.getString("IngredientName") +" "+ rs.getInt("Quantity") +"\n");
				
			}
			
		}	 catch(Exception e) {
			e.printStackTrace();
			}
		
		
		return sb.toString();
	}

	
  	public String test(){
		String cookie = "";		
		try {
			String sql = "select * from Cookies where CookieName =?";
			String a ="Nut ring";
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setString(1, a);
			ResultSet rs = ps.executeQuery();
			rs.next();
			cookie = rs.getString("CookieName");
				
				
			
		} catch(Exception e) {
			e.printStackTrace();
		}
		 
		return cookie;
	}
	
	public List<String> cookieNames(){
		List<String> cookies = new  ArrayList<String>();		
		try {
			String sql = "select * from Cookies";
			PreparedStatement ps = conn.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			rs.next();
			while (rs.next()) {
				cookies.add(rs.getString("CookieName"));
			}
				
				
			
		} catch(Exception e) {
			e.printStackTrace();
		}
		 
		return cookies;
	}
	
	public List<Integer> pallets(){
		List<Integer> pallets = new  ArrayList<Integer>();
		try {
			String sql = "select * from Pallets";
			PreparedStatement ps = conn.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			
			while (rs.next()) {
				pallets.add(rs.getInt("PalletNbr"));
				
			}
				
				
			
		} catch(Exception e) {
			e.printStackTrace();
		}
		 
		return pallets;
	
	}
	
	
	
	//Kollar om det finns nog med material i lager 
	public boolean ableToProduce(String cookie, int amount){
			ArrayList<String> ingredients = new ArrayList<String>();	
			int amountNeeded = 0;
			ArrayList<Integer> quantity = new ArrayList<Integer>();	
			if(amount<=0){
				return false;
			}
			try {
				String sql = "Select IngredientName, Quantity from Recipe where CookieName=? ";
				
						PreparedStatement ps = conn.prepareStatement(sql);
						ps.setString(1, cookie);
						
						ResultSet rs = ps.executeQuery();
						rs.next();
					while(rs.next()){
						ingredients.add(rs.getString("IngredientName"));
						//int q = 54 * rs.getInt("Quantity");
						quantity.add(rs.getInt("Quantity"));
						
					}
					int quantit=0;
					int k=0;
					String ingredient;
					
					while(k<quantity.size()){
						
					ingredient=ingredients.get(k);
					quantit=quantity.get(k);
					String sql1= "Select QuantityInStorage from Ingredients where IngredientName=?";
					PreparedStatement ps1 = conn.prepareStatement(sql1);
					ps1.setString(1, ingredient);
					ResultSet rs1 = ps.executeQuery();
					rs1.next();
					ArrayList<Integer> stock= new ArrayList<Integer>();
					while(rs1.next()){
						stock.add(rs1.getInt("QuanitityInStorage"));
						}
					 	int i=0;
					 	int newstock=0;
					 	if(stock.get(i)<quantit*54*amount){
					 		return false;
					 	}
					 	else{
					 		k++;
					 		return true;
					 	}
					}
							
				} catch (SQLException e) {
					e.printStackTrace();
				}
			return true;
	}	
	
	
	public List<Integer> orderID( ){
		List<Integer> orderID= new ArrayList<Integer>();
		try {
			String sql = "Select * from Orders";
			
					PreparedStatement ps = conn.prepareStatement(sql);
				
					
					ResultSet rs = ps.executeQuery();
					rs.next();
				while(rs.next()){
					orderID.add(rs.getInt("OrderID"));
				}
								
				
					
						
			} catch (SQLException e) {
				e.printStackTrace();
			}
		
		return orderID;
	}
	
	public List<Integer> getPalletTimeProduced(String time1, String time2 ){
		List<Integer> pallets= new ArrayList<Integer>();
		try {
			String sql = "Select PalletNbr from Pallets where TimeProduced between ? and ?";
			
					PreparedStatement ps = conn.prepareStatement(sql);
					ps.setString(1, time1);
					ps.setString(2, time2);
					
					ResultSet rs = ps.executeQuery();
					rs.next();
				while(rs.next()){
					pallets.add(rs.getInt("PalletNbr"));
				}
								
				
					
						
			} catch (SQLException e) {
				e.printStackTrace();
			}
		
		return pallets;
	}
	
	public void Produce(String timeproduced, String cookie, int orderid, int amount){
		
		try {
			String location="Production";
			
			if(ableToProduce(cookie, amount)){
			String sql = "Insert into Pallets(TimeProduced, Produced, CookieName, Location, Blocked, OrderID) values(?,?,?,?,?,?)";
			
					PreparedStatement ps = conn.prepareStatement(sql);
					ps.setString(1, timeproduced);
					ps.setBoolean(2, true);
					ps.setString(3, cookie);
					ps.setString(4, location);
					ps.setBoolean(5, false);
					ps.setInt(6, orderid);
					
					ResultSet rs = ps.executeQuery();
					rs.next();
								
				
			}
						
			} catch (SQLException e) {
				e.printStackTrace();
			}

	}
	
	public void updateStorage(int amount, String cookie){
		
		ArrayList<String> ingredients = new ArrayList<String>();	
		int amountNeeded = 0;
		ArrayList<Integer> quantity = new ArrayList<Integer>();	
		if(amount<=0){
			
		}
		try {
			String sql = "Select IngredientName, Quantity from Recipe where CookieName=? ";
			
					PreparedStatement ps = conn.prepareStatement(sql);
					ps.setString(1, cookie);
					
					ResultSet rs = ps.executeQuery();
					rs.next();
				while(rs.next()){
					ingredients.add(rs.getString("IngredientName"));
					//int q = 54 * rs.getInt("Quantity");
					quantity.add(rs.getInt("Quantity"));
					
				}
				int quantit=0;
				int k=0;
				String ingredient;
				
				while(k<quantity.size()){
					
					ingredient=ingredients.get(k);
					quantit=quantity.get(k);
					String sql1= "Select QuantityInStorage from Ingredients where IngredientName=?";
					PreparedStatement ps1 = conn.prepareStatement(sql1);
					ps1.setString(1, ingredient);
					ResultSet rs1 = ps.executeQuery();
					rs1.next();
					ArrayList<Integer> stock= new ArrayList<Integer>();
					while(rs1.next()){
						stock.add(rs1.getInt("QuanitityInStorage"));
					}
					int i=0;
					int newstock=0;
					if(stock.get(i)<quantit*54*amount){
				 		
				 	}
				 	else{
				 	
				 		newstock=stock.get(i)-quantit*54*amount;
				 		String sql2= "Update Ingredients SET QuanitityInStorage=? where IngredientName=?";
				 		PreparedStatement ps2=  conn.prepareStatement(sql2);
				 		ps2.setInt(1, newstock);
				 		ps2.setString(2, ingredient);
				 		ps2.executeUpdate();
				 			
			 		
				 		k++;
				 		
				 	
				 	}
				 	
				}
			
		
				
	
				

					
						
			} catch (SQLException e) {
				e.printStackTrace();
			}
	
}	
		
	
	
	public boolean block(int palletNbr) {
		
		try {
			String sql = "Select Produced from Pallets where PalletNbr=? ";
			
					PreparedStatement ps = conn.prepareStatement(sql);
					ps.setInt(1, palletNbr);
					
					ResultSet rs = ps.executeQuery();
					rs.next();
				if(rs.getBoolean(1)== true){
					
				}else{
					return false;
				}
								
				
					
						
			} catch (SQLException e) {
				e.printStackTrace();
			}
		
		try {
			
			String sql = "update Pallets set blocked = true where PalletNbr=? ";
			
					PreparedStatement ps = conn.prepareStatement(sql);
					ps.setInt(1, palletNbr);
					
					ps.executeUpdate();
				ResultSet rs = ps.getGeneratedKeys();
				rs.next();
				
					return true;
				
					
						
			} catch (SQLException e) {
				e.printStackTrace();
			}
		return false;
		
	}
	
public boolean unBlock(int palletNbr) {
		
		try {
			String sql = "Select Produced from Pallets where PalletNbr=? ";
			
					PreparedStatement ps = conn.prepareStatement(sql);
					ps.setInt(1, palletNbr);
					
					ResultSet rs = ps.executeQuery();
					rs.next();
				if(rs.getBoolean(1)== true){
					
				}else{
					return false;
				}
								
				
					
						
			} catch (SQLException e) {
				e.printStackTrace();
			}
		
		try {
			
			String sql = "update Pallets set blocked = true where PalletNbr=? ";
			
					PreparedStatement ps = conn.prepareStatement(sql);
					ps.setInt(1, palletNbr);
					
					ps.executeUpdate();
				ResultSet rs = ps.getGeneratedKeys();
				rs.next();
				
					return true;
				
					
						
			} catch (SQLException e) {
				e.printStackTrace();
			}
		return false;
		
	}

	public Pallet getPalletData(int pNbr){
		String tProduced = ""; 
		String location = "";
		String blocked = "";
		String produced = "";
		String cookieName = ""; 
		
		try {
			String sql = "Select TimeProduced from Pallets where PalletNbr=? ";
			
					PreparedStatement ps = conn.prepareStatement(sql);
					ps.setInt(1, pNbr);
					
					ResultSet rs = ps.executeQuery();
					rs.next();
				tProduced = rs.getString("TimeProduced");
												
					
						
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
		try {
			String sql = "Select Location from Pallets where PalletNbr=? ";
			
					PreparedStatement ps = conn.prepareStatement(sql);
					ps.setInt(1, pNbr);
					
					ResultSet rs = ps.executeQuery();
					rs.next();
				tProduced = rs.getString("Location");
												
					
						
			} catch (SQLException e) {
				e.printStackTrace();
			}
		
		try {
			String sql = "Select Blocked from Pallets where PalletNbr=? ";
			
					PreparedStatement ps = conn.prepareStatement(sql);
					ps.setInt(1, pNbr);
					
					ResultSet rs = ps.executeQuery();
					rs.next();
				blocked = ""+rs.getBoolean("Blocked")+"";
												
					
						
			} catch (SQLException e) {
				e.printStackTrace();
			}
		try {
			String sql = "Select Produced from Pallets where PalletNbr=? ";
			
					PreparedStatement ps = conn.prepareStatement(sql);
					ps.setInt(1, pNbr);
					
					ResultSet rs = ps.executeQuery();
					rs.next();
				produced = ""+rs.getBoolean("Produced")+"";
												
					
						
			} catch (SQLException e) {
				e.printStackTrace();
			}
		
		try {
			String sql = "Select CookieName from Pallets where PalletNbr=? ";
			
					PreparedStatement ps = conn.prepareStatement(sql);
					ps.setInt(1, pNbr);
					
					ResultSet rs = ps.executeQuery();
					rs.next();
				cookieName = rs.getString("CookieName");
												
					
						
			} catch (SQLException e) {
				e.printStackTrace();
			}
		
		
		
	
	return new Pallet(pNbr, tProduced, location, blocked, produced, cookieName);
	}
	
	
	public Cookies getCookieData(String cookieName){
		ArrayList<Integer> pallets = new ArrayList<Integer>();
		try {
			String sql = "Select PalletNbr from Pallets where CookieName=? ";
			
					PreparedStatement ps = conn.prepareStatement(sql);
					ps.setString(1, cookieName);
					
					ResultSet rs = ps.executeQuery();
					while(rs.next()){
						rs.next();
						pallets.add(rs.getInt("PalletNbr"));
						
					}
					
				
												
					
						
			} catch (SQLException e) {
				e.printStackTrace();
			}
		return new Cookies(cookieName, pallets);
	}


	

	
	

    /* --- TODO: insert more own code here --- */
}




package datamodel;

import java.util.ArrayList;

public class Cookies {
	private String cookieName;
	private ArrayList<Integer> pallets;
	
	

	public Cookies(){
		init(null, null);
	}
	public Cookies(String cName, ArrayList<Integer> pallet){
		init(cName, pallet);
	}
	
	public Cookies(String cName){
		init(cName, null);
	}
	
	public void init(String cName, ArrayList<Integer> pallets){
		cookieName = cName;
		this.pallets = pallets;
	}
	
	public String getCookieName(){ return cookieName;}
	public ArrayList<Integer> getPallets(){ return pallets;}

}


package Gui;

import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.text.Text;

import java.util.List;



import datamodel.*;

import java.util.ArrayList;


public class PalletTab {
	// top context message
	@FXML private Text topContext;
	// bottom message
	@FXML private Text msg;
	
	// table references
	@FXML private ListView<String> cookieList;
	@FXML private ListView<Integer> palletsList;
	
	// show info references
	@FXML private Label palletTimeProduced;
	@FXML private Label palletLocation;
	@FXML private Label palletBlocked;
	@FXML private Label palletProduced;
	@FXML private Label palletPalletNumber;
	@FXML private Label palletCookieName;
	
	@FXML private Label cookieName;
	@FXML private Label cookiePallets;
	
	
	// blocking button
	@FXML private Button block;
	
	private Database db;
	private Pallet crtPallet = new Pallet();
	private Cookies crtCookie = new Cookies();
	
	public void initialize() {
		System.out.println("Initializing Production");
		
			
			//fillPalletList();
			//fillCookieList();
		
		// set up listeners for the cookie list selection
		cookieList.getSelectionModel().selectedItemProperty().addListener(
				(obs, oldV, newV) -> {
					// need to update the date list according to the selected movie
					// update also the details on the right panel
					String cookie = newV;
					//String cookie= cookieList.getSelectionModel().getSelectedItem();
					fillCookie(cookie);
				});
		
		// set up listeners for the pallet list selection
		palletsList.getSelectionModel().selectedItemProperty().addListener(
				(obs, oldV, newV) -> {
					// need to update the details according to the selected date
					
					int pallet = newV;
					//int pallet= palletsList.getSelectionModel().getSelectedItem();
				    fillPallet(pallet);
				});

		// set up block button listener
		// one can either use this method (setup a handler in initialize)
		
		block.setOnAction(
				(event) -> {
					int palletNbr = palletsList.getSelectionModel().getSelectedItem();
					
					
					
						if(db.block(palletNbr)){
													
						report("Pallet blocked");
					}else{
						report("Pallet not blocked");
					}
					
				});
		
		report("Ready.");
		
	}
	
	
	
	private void report(String txt) {
		msg.setText(txt);
	}
	
	public void setDatabase(Database db) {
		this.db = db;
	}
	
	private void fillCookieList() {
		List<String> cookies = new ArrayList<String>();
		
		// query the database via db
		
	
		
		cookies.addAll(db.cookieNames());
		
			
		
		cookieList.setItems(FXCollections.observableList(cookies));
		// remove any selection
		cookieList.getSelectionModel().clearSelection();
	}

	private void fillPalletList() {
		List<Integer> pallets = new ArrayList<Integer>();
		
			// query the database via db
			/* --- TODO: replace with own code --- */
			pallets.addAll(db.pallets());
		
			/* --- END TODO --- */			
		
		palletsList.setItems(FXCollections.observableList(pallets));
		// remove any selection
		palletsList.getSelectionModel().clearSelection();
	}
	
	private void fillPallet(int palletNbr) {
		if(palletNbr==-1) // no movie selected
			crtPallet = new Pallet();
		else // query the database via db
			crtPallet = db.getPalletData(palletNbr);
		
		
		palletPalletNumber.setText(""+crtPallet.getPalletNbr()+"");
		palletLocation.setText(crtPallet.getLocation());
		palletBlocked.setText(crtPallet.getBlocked());
		palletProduced.setText(crtPallet.getProduced());
		palletCookieName.setText(crtPallet.getCookieName());
		palletTimeProduced.setText(crtPallet.getTimeProduced());
		
	}
	
	
	
	
	private void fillCookie(String cookie) {
		
		if(cookie==null) // no movie selected
			crtCookie = new Cookies(cookie);
		else // query the database via db
			crtCookie = db.getCookieData(cookie);
		
		cookieName.setText(crtCookie.getCookieName());
		cookiePallets.setText(""+crtCookie.getPallets()+"");
	
	}
	
	
	
	
}

package Gui;


import datamodel.Database;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.text.Text;

import javafx.scene.control.Alert;
import javafx.scene.control.Alert.*;

// controller for both the top tabs and login tab!

public class LoginTab {
    @FXML private Text actiontarget;   
    private PalletTab palletTabCtrl;
    private Database db;
       
    @FXML protected void handleSubmitButtonAction(ActionEvent event) {
    	
        if(!db.isConnected()) {
	        // inform the user that there is no check against the database
	        Alert alert = new Alert(AlertType.ERROR);
	        alert.setTitle("Login fail");
	        alert.setHeaderText(null);
	        alert.setContentText("No database connection! Cannot check user credentials.");
	        alert.showAndWait();      	
        } else {
                  
        	palletTabCtrl.initialize();
        }
    }

    public void initialize() {
    	System.out.println("Initializing LoginTab.");    	
    }
        
    // helpers
    // use this pattern to send data down to controllers at initialization
    public void setPalletTab(PalletTab palletTabCtrl) {
    	System.out.println("LoginTab sets palletTab: "+palletTabCtrl);
    	this.palletTabCtrl = palletTabCtrl; 	
    }
    
    public void setDatabase(Database db) {
    	this.db = db;
    }
    
}


package Gui;

import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.text.Text;

import java.util.List;



import datamodel.*;

import java.util.ArrayList;


public class PalletTab {
	// top context message
	@FXML private Text topContext;
	// bottom message
	@FXML private Text msg;
	
	// table references
	@FXML private ListView<String> cookieList;
	@FXML private ListView<Integer> palletsList;
	
	// show info references
	@FXML private Label palletTimeProduced;
	@FXML private Label palletLocation;
	@FXML private Label palletBlocked;
	@FXML private Label palletProduced;
	@FXML private Label palletPalletNumber;
	@FXML private Label palletCookieName;
	
	@FXML private Label cookieName;
	@FXML private Label cookiePallets;
	
	
	// blocking button
	@FXML private Button block;
	
	private Database db;
	private Pallet crtPallet = new Pallet();
	private Cookies crtCookie = new Cookies();
	
	public void initialize() {
		System.out.println("Initializing Production");
		
			
			//fillPalletList();
			//fillCookieList();
		
		// set up listeners for the cookie list selection
		cookieList.getSelectionModel().selectedItemProperty().addListener(
				(obs, oldV, newV) -> {
					// need to update the date list according to the selected movie
					// update also the details on the right panel
					String cookie = newV;
					//String cookie= cookieList.getSelectionModel().getSelectedItem();
					fillCookie(cookie);
				});
		
		// set up listeners for the pallet list selection
		palletsList.getSelectionModel().selectedItemProperty().addListener(
				(obs, oldV, newV) -> {
					// need to update the details according to the selected date
					
					int pallet = newV;
					//int pallet= palletsList.getSelectionModel().getSelectedItem();
				    fillPallet(pallet);
				});

		// set up block button listener
		// one can either use this method (setup a handler in initialize)
		
		block.setOnAction(
				(event) -> {
					int palletNbr = palletsList.getSelectionModel().getSelectedItem();
					
					
					
						if(db.block(palletNbr)){
													
						report("Pallet blocked");
					}else{
						report("Pallet not blocked");
					}
					
				});
		
		report("Ready.");
		
	}
	
	
	
	private void report(String txt) {
		msg.setText(txt);
	}
	
	public void setDatabase(Database db) {
		this.db = db;
	}
	
	private void fillCookieList() {
		List<String> cookies = new ArrayList<String>();
		
		// query the database via db
		
	
		
		cookies.addAll(db.cookieNames());
		
			
		
		cookieList.setItems(FXCollections.observableList(cookies));
		// remove any selection
		cookieList.getSelectionModel().clearSelection();
	}

	private void fillPalletList() {
		List<Integer> pallets = new ArrayList<Integer>();
		
			// query the database via db
			/* --- TODO: replace with own code --- */
			pallets.addAll(db.pallets());
		
			/* --- END TODO --- */			
		
		palletsList.setItems(FXCollections.observableList(pallets));
		// remove any selection
		palletsList.getSelectionModel().clearSelection();
	}
	
	private void fillPallet(int palletNbr) {
		if(palletNbr==-1) // no movie selected
			crtPallet = new Pallet();
		else // query the database via db
			crtPallet = db.getPalletData(palletNbr);
		
		
		palletPalletNumber.setText(""+crtPallet.getPalletNbr()+"");
		palletLocation.setText(crtPallet.getLocation());
		palletBlocked.setText(crtPallet.getBlocked());
		palletProduced.setText(crtPallet.getProduced());
		palletCookieName.setText(crtPallet.getCookieName());
		palletTimeProduced.setText(crtPallet.getTimeProduced());
		
	}
	
	
	
	
	private void fillCookie(String cookie) {
		
		if(cookie==null) // no movie selected
			crtCookie = new Cookies(cookie);
		else // query the database via db
			crtCookie = db.getCookieData(cookie);
		
		cookieName.setText(crtCookie.getCookieName());
		cookiePallets.setText(""+crtCookie.getPallets()+"");
	
	}
	
	
	
	
}



package Gui;

import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.text.*;
import java.util.List;
import datamodel.*;
import javafx.scene.control.TextField;
import java.util.ArrayList;


public class ProduceTab {
	// top context message
	@FXML private Text topContext;
	// bottom message
	@FXML private Text msg;
	
	// table references
	@FXML private ListView<Integer> orderList;
	@FXML private TextField cookie;
	@FXML private TextField amount;
	@FXML private TextField orderID;
	@FXML private TextField time;
	@FXML private TextField time2;
	
	// produce button
	@FXML private Button produce;
	
	private Database db;
	
	
	public void initialize() {
		System.out.println("Initializing Produce Pallet");
		if(!db.isConnected()){
			System.out.println("Database not connected");
		}else{
		
		fillOrderList();
		
		
		
		
		cookie = new TextField();
		amount = new TextField();
		orderID = new TextField();
		time = new TextField();
		time2 = new TextField();

		// set up produce button listener
		// one can either use this method (setup a handler in initialize)
		
		produce.setOnAction(
				(event) -> {
//					
					
					//Skapa rutor där man skriver in kaknamn, mängd, orderID
					//db.Produce(time.getText(), cookie.getText(), Integer.parseInt(orderID.getText()), Integer.parseInt(amount.getText()));
					//report("Pallet Produced");
					
				});
		
		report("Ready.");
		}
		
	}
	
	
	
	private void report(String txt) {
		msg.setText(txt);
	}
	
	public void setDatabase(Database db) {
		this.db = db;
	}
	
	private void fillOrderList() {
		List<Integer> orderID = new ArrayList<Integer>();
		
		// query the database via db
		
	
		
		orderID.addAll(db.orderID());
		
			
		
		orderList.setItems(FXCollections.observableList(orderID));
		// remove any selection
		orderList.getSelectionModel().clearSelection();
	}

	
	
	
	
	
}

package Gui;

import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.scene.control.ListView;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.text.Text;
import java.util.List;
import datamodel.*;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;

import java.util.ArrayList;


public class SearchTab {
	// top context message
	@FXML private Text topContext;
	// bottom message
	@FXML private Text msg;
	
	// table references
	@FXML private TextField time1;
	@FXML private TextField time2;
	
	@FXML private ListView<Integer> palletList;
	
	
	// blocking button
	@FXML private Button search;
	
	private Database db;
	
	
	public void initialize() {
		System.out.println("Initializing Search Pallet");
		
		
		
		
		time1 = new TextField();
		time2 = new TextField();
		time1.setPromptText("Enter first time");
		time2.setPromptText("Enter second time");
		
		String timeS = time1.getText();
		String timeT = time2.getText();
		if(!db.isConnected()){
			System.out.println("Database not connected");
		}else{
	
		// set up produce button listener
		// one can either use this method (setup a handler in initialize)
		
		
		
		search.setOnAction(
			(	(event) -> {
				if(timeS!=null && timeT!=null){
					fillPalletList(timeS, timeT);
			}else{
				report("You haven't written anything");
			}
					
				}));
		
		report("Ready.");
		}
	}
	
	
	
	private void report(String txt) {
		msg.setText(txt);
	}
	
	public void setDatabase(Database db) {
		this.db = db;
	}
	
	private void fillPalletList(String time1, String time2) {
		List<Integer> pallets = new ArrayList<Integer>();
		
		// query the database via db
		
	
		
		pallets.addAll(db.getPalletTimeProduced(time1, time2));
		
			
		
		palletList.setItems(FXCollections.observableList(pallets));
		// remove any selection
		palletList.getSelectionModel().clearSelection();
	}

	
	
	
	
	
}

package Gui;

import javafx.scene.Parent;
import datamodel.Database;
import javafx.fxml.FXML;

public class TopTabView {
		

	@FXML private Parent aPalletTab;
	@FXML private Parent aSearchTab;
	@FXML private Parent aProduceTab;
	@FXML private Parent aLoginTab;
	@FXML private PalletTab aPalletTabController;
	@FXML private SearchTab aSearchTabController;
	@FXML private ProduceTab aProduceTabController;
	@FXML private LoginTab aLoginTabController;
	
	public void initialize() {
		System.out.println("Initializing TopTabView");
		aLoginTabController.setPalletTab(aPalletTabController);
		

	}
	
	public void setDatabase(Database db) {
		aLoginTabController.setDatabase(db);
		aPalletTabController.setDatabase(db);
		aSearchTabController.setDatabase(db);
		aProduceTabController.setDatabase(db);
		
		
	}
}
  
  
<?xml version="1.0" encoding="UTF-8"?>

<?import java.net.*?>
<?import javafx.geometry.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.*?>


<GridPane fx:controller="gui.LoginTab" 
    xmlns:fx="http://javafx.com/fxml" alignment="center" hgap="10" vgap="10"
    styleClass="root">
    <padding><Insets top="25" right="25" bottom="25" left="25"/></padding>
    
    <Text id="welcome-text" text="Welcome" 
         GridPane.columnIndex="0" GridPane.rowIndex="0"
        GridPane.columnSpan="2"/>
 
    <!-- <Label text="User Name:"
        GridPane.columnIndex="0" GridPane.rowIndex="1"/>
 
     <TextField fx:id="username"
        GridPane.columnIndex="1" GridPane.rowIndex="1"/> -->
         
    <HBox spacing="10" alignment="bottom_right" 
        GridPane.columnIndex="1" GridPane.rowIndex="4">
        <Button text="Sign In"     
        onAction="#handleSubmitButtonAction"/>
    </HBox>

    <Text fx:id="actiontarget"
        GridPane.columnIndex="1" GridPane.rowIndex="6"/>
        
    <stylesheets>
      <URL value="@login.css" />
    </stylesheets>

</GridPane>


<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ListView?>
<?import javafx.scene.control.SplitPane?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.text.*?>

<SplitPane dividerPositions="0.4" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0"  xmlns="http://javafx.com/javafx/8.0.65" xmlns:fx="http://javafx.com/fxml" fx:controller="Gui.PalletTab" 
styleClass="root">
    <items>
   <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="400.0" prefWidth="240.0">
         <children>
            <ListView fx:id="palletsList" prefHeight="400.0" prefWidth="120.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.topAnchor="20.0" />
            <ListView fx:id="cookieList" layoutX="120.0" prefHeight="380.0" prefWidth="110.0" AnchorPane.bottomAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="20.0" />
            <Label layoutX="14.0" layoutY="6.0" text="Pallet Number" AnchorPane.leftAnchor="20.0" AnchorPane.topAnchor="0.0" />
            <Label layoutX="158.0" layoutY="6.0" text="Cookie" AnchorPane.rightAnchor="20.0" AnchorPane.topAnchor="0.0" />
         </children></AnchorPane>
     <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="400.0" prefWidth="360.0">
         <children>
            <Button fx:id="block" mnemonicParsing="false" text="Block pallet" AnchorPane.bottomAnchor="60.0" AnchorPane.leftAnchor="50.0" AnchorPane.rightAnchor="50.0" />
            <Text fx:id="topContext" text="Information:" AnchorPane.leftAnchor="5.0" AnchorPane.topAnchor="5.0" />
            <GridPane AnchorPane.leftAnchor="5.0" AnchorPane.rightAnchor="5.0" AnchorPane.topAnchor="30.0">
              <columnConstraints>
                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
              </columnConstraints>
              <rowConstraints>
                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
                  <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
              </rowConstraints>
               <children>
                 <Label text="Pallet:" />
                  <Label fx:id="palletPalletNumber"   GridPane.rowIndex="1" />
                  <Label text="Pallet Number:"   GridPane.rowIndex="1" />
                 <Label text="Blocked:"    GridPane.rowIndex="2" />
                  <Label text="Produced:"  GridPane.rowIndex="3" />
                  <Label text="Cookie Name:"  GridPane.columnIndex="1" />
                  <Label text="Time Produced:"  GridPane.columnIndex="1" GridPane.rowIndex="1" />
                  
               </children>
            </GridPane>
           <Text fx:id="msg" layoutX="83.0" layoutY="368.0" text="Label" textAlignment="CENTER" AnchorPane.bottomAnchor="10.0" AnchorPane.leftAnchor="10.0" AnchorPane.rightAnchor="10.0" />
         </children></AnchorPane>
  </items>
  
</SplitPane>


<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ListView?>
<?import javafx.scene.control.SplitPane?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.text.*?>
<?import java.net.*?>
<?import javafx.geometry.*?>
<?import javafx.scene.layout.*?>


<SplitPane dividerPositions="0.4" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0"  xmlns="http://javafx.com/javafx/8.0.65" xmlns:fx="http://javafx.com/fxml" fx:controller="Gui.ProduceTab" 
styleClass="root">
    <items>
   <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="400.0" prefWidth="380.0">
         <children>
            <ListView fx:id="orderList" prefHeight="400.0" prefWidth="120.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.topAnchor="20.0" />
            
            <Label layoutX="14.0" layoutY="6.0" text="OrderID" AnchorPane.leftAnchor="20.0" AnchorPane.topAnchor="0.0" />
            
         </children></AnchorPane>
     <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="400.0" prefWidth="390.0">
         <children>
           <GridPane AnchorPane.leftAnchor="5.0" AnchorPane.rightAnchor="6.0" AnchorPane.topAnchor="60.0">
         	 	
        		<TextField id="cookie" fx:id="cookie" GridPane.columnIndex="3" GridPane.rowIndex="9"/>
        		<TextField id="amount" fx:id="amount" GridPane.columnIndex="3" GridPane.rowIndex="11"/>
         		<TextField id ="orderID" fx:id="orderID" GridPane.columnIndex="3" GridPane.rowIndex="13"/>
         		<TextField id ="time" fx:id="time" GridPane.columnIndex="3" GridPane.rowIndex="15"/>
         		<Label text="Write Name of Cookie:" GridPane.rowIndex="7" />
               	<Label text="Write amount of Pallets:" GridPane.rowIndex="10" />
               	<Label text="Write orderID:" GridPane.rowIndex="12" />
               	<Label text="Write time ex:'2016-03-10 11:00':" GridPane.rowIndex="14" />
         	 </GridPane>
            <Button fx:id="produce" mnemonicParsing="false" text="Produce pallet" AnchorPane.bottomAnchor="60.0" AnchorPane.leftAnchor="50.0" AnchorPane.rightAnchor="50.0" />
           
            <Text fx:id="topContext" text="Produce a new Pallet:" AnchorPane.leftAnchor="5.0" AnchorPane.topAnchor="10.0" />
            <GridPane AnchorPane.leftAnchor="5.0" AnchorPane.rightAnchor="5.0" AnchorPane.topAnchor="5.0">
              
               <children>
                 <Label text="Produce Pallet:" />
                 
               </children>
            </GridPane>
           <Text fx:id="msg" layoutX="83.0" layoutY="380.0" text="Label" textAlignment="CENTER" AnchorPane.bottomAnchor="10.0" AnchorPane.leftAnchor="10.0" AnchorPane.rightAnchor="10.0" />
         </children></AnchorPane>
  </items>
  
</SplitPane>



<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ListView?>
<?import javafx.scene.control.SplitPane?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.text.*?>

<SplitPane dividerPositions="0.4" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0"  xmlns="http://javafx.com/javafx/8.0.65" xmlns:fx="http://javafx.com/fxml" fx:controller="Gui.SearchTab" 
styleClass="root">
    <items>
   <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="400.0" prefWidth="240.0">
         <children>
            <ListView fx:id="palletList" prefHeight="400.0" prefWidth="120.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.topAnchor="20.0" />
            
            <Label layoutX="14.0" layoutY="6.0" text="Pallet Number" AnchorPane.leftAnchor="20.0" AnchorPane.topAnchor="0.0" />
            
         </children></AnchorPane>
     <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="400.0" prefWidth="360.0">
         <children>
          <GridPane AnchorPane.leftAnchor="5.0" AnchorPane.rightAnchor="6.0" AnchorPane.topAnchor="60.0">
         	<TextField id="time1" fx:id="time1" GridPane.columnIndex="3" GridPane.rowIndex="5"/>
         	<TextField id ="time2" fx:id="time2" GridPane.columnIndex="3" GridPane.rowIndex="9"/>
        	<Label text="Write first time ex:'2016-03-10 11:00':" GridPane.rowIndex="2" />
        	<Label text="Write second time ex:'2016-03-10 11:00':" GridPane.rowIndex="6" />
         </GridPane>
            <Button fx:id="search" mnemonicParsing="false" text="Search pallet" AnchorPane.bottomAnchor="60.0" AnchorPane.leftAnchor="50.0" AnchorPane.rightAnchor="50.0" />
            <Text fx:id="topContext" text="Search for pallets between two dates and times::" AnchorPane.leftAnchor="5.0" AnchorPane.topAnchor="10.0" />
            <GridPane AnchorPane.leftAnchor="5.0" AnchorPane.rightAnchor="5.0" AnchorPane.topAnchor="3.0">
            
               <children>
                 <Label text="Search for Pallet:" />
                  
                  
               </children>
            </GridPane>
           <Text fx:id="msg" layoutX="83.0" layoutY="368.0" text="Label" textAlignment="CENTER" AnchorPane.bottomAnchor="10.0" AnchorPane.leftAnchor="10.0" AnchorPane.rightAnchor="10.0" />
         </children></AnchorPane>
  </items>
  
</SplitPane>


<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.layout.*?>
<?import javafx.scene.control.*?>

<BorderPane fx:controller="Gui.TopTabView"  xmlns:fx="http://javafx.com/fxml/1" styleClass="root">
<top>
   <TabPane tabClosingPolicy="UNAVAILABLE">
    <tabs>
    
    	<Tab text="Login">
                 <fx:include fx:id="aLoginTab" source="loginTab.fxml"/>
        </Tab>
     
       <Tab text="Production">
                 <fx:include fx:id="aPalletTab" source="palletTab.fxml"/>
        </Tab>
        <Tab text="Search">
                 <fx:include fx:id="aSearchTab" source="searchTab.fxml"/>
        </Tab>
        <Tab text="Produce New Pallet">
                 <fx:include fx:id="aProduceTab" source="produceTab.fxml"/>
        </Tab>
       
        
    </tabs>
    </TabPane>
</top>
</BorderPane>

package Gui;
	
import datamodel.Database;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.stage.Stage;


public class Main extends Application {
		
	private Database db = new Database();
	
	@Override
	public void start(Stage primaryStage) {
		try {
			
			//BorderPane root = new BorderPane();
				
			FXMLLoader loader = new FXMLLoader(getClass().getResource("/Gui/TopTab.fxml"));			
			Parent root = loader.<Parent>load();
			
			
			
			Scene scene = new Scene(root,600,440);
			scene.getStylesheets().add(getClass().getResource("/Gui/application.css").toExternalForm());

			// obtain main controller
			TopTabView wc = (TopTabView) loader.getController();
	        // make the database object visible to the controller
			

			primaryStage.setTitle("Krusty Cookies Production");
			primaryStage.setScene(scene);
			primaryStage.show();
			wc.setDatabase(db);
			
			
			// opening database connection
	        /* --- TODO: change xxx to your user name, yyy to your password --- */	        
	        if(!db.openConnection("hbg25", "sdp942fg")) {
	            Alert alert = new Alert(AlertType.ERROR);
	            alert.setTitle("Database error");
	            alert.setHeaderText(null);
	            alert.setContentText("Could not connect to the database! Check console for details.");
	            alert.showAndWait();
	        } 
	        
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
		launch(args);
	}
	
	@Override
	public void stop() {
		// close the database here
		db.closeConnection();		
		try {
			super.stop();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}




package datamodel;

public class Pallet {
	private String timeProduced;
	private String location;
	private String blocked;
	private String produced;
	private int palletNbr;
	private String cookieName;
	
	public Pallet(){
		init(-1,"","","","","");
		
	}
	
	public Pallet(int palletNbr, String timeProduced, String location, String blocked, String produced, String cookieName){
		init(palletNbr,timeProduced,location, blocked, produced, cookieName);
	}
	
	public Pallet(int palletNbr) {
		init(palletNbr,"","","","","");
	}
	
	
	
	public void init(int pNbr, String tProduced, String location, String blocked, String produced, String cName){
		palletNbr=pNbr;
		timeProduced=tProduced;
		this.location = location;
		this.blocked = blocked;
		this.produced = produced;
		cookieName = cName;
	}
	
	public int getPalletNbr(){return palletNbr;}
	public String getTimeProduced(){return timeProduced;}
	public String getLocation(){return location;}
	public String getBlocked(){return blocked;}
	public String getProduced(){return produced;}
	public String getCookieName(){return cookieName;}
		
	
}

